package service

import (
	"reflect"
	"testing"

	"github.com/BohdanPatrash/indenticon/dto"
)

func TestCreateUser(t *testing.T) {
	type args struct {
		email string
	}
	tests := []struct {
		name string
		args args
		want *dto.User
	}{
		{
			name: "first test",
			args: args{email: "test@mail.com"},
			want: &dto.User{
				Email:      "test@mail.com",
				Hash:       []byte{240, 226, 162, 27, 207, 73, 156, 188, 113, 60, 71, 216, 240, 52, 214, 110, 144, 169, 159, 159, 252, 254, 150, 70, 108, 153, 113, 223, 220, 92, 152, 22},
				Indenticon: []byte{137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 1, 0, 0, 0, 1, 0, 8, 2, 0, 0, 0, 211, 16, 63, 49, 0, 0, 3, 253, 73, 68, 65, 84, 120, 156, 236, 221, 65, 110, 211, 88, 0, 128, 225, 153, 17, 74, 36, 238, 194, 138, 69, 196, 37, 186, 227, 148, 236, 184, 68, 148, 5, 43, 86, 220, 128, 19, 128, 236, 213, 44, 144, 58, 37, 237, 36, 144, 134, 188, 218, 255, 247, 173, 44, 171, 170, 159, 212, 254, 241, 139, 29, 191, 188, 250, 254, 245, 203, 95, 80, 245, 207, 232, 1, 192, 72, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 246, 106, 244, 0, 184, 142, 105, 62, 140, 30, 194, 53, 109, 55, 187, 219, 28, 72, 0, 235, 113, 179, 127, 154, 63, 237, 150, 49, 155, 2, 145, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 179, 56, 46, 131, 125, 120, 251, 237, 104, 207, 221, 254, 137, 157, 191, 238, 253, 167, 215, 191, 254, 195, 206, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 235, 188, 15, 240, 156, 171, 200, 87, 241, 91, 151, 162, 25, 200, 25, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 180, 191, 191, 127, 253, 50, 122, 12, 215, 151, 186, 19, 60, 205, 135, 155, 29, 107, 53, 182, 155, 221, 143, 141, 117, 126, 20, 162, 102, 187, 217, 77, 243, 225, 254, 143, 186, 44, 79, 61, 18, 249, 249, 227, 187, 55, 23, 255, 194, 179, 175, 62, 15, 95, 50, 76, 129, 72, 115, 6, 88, 161, 225, 51, 192, 19, 94, 218, 199, 4, 157, 1, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 30, 137, 92, 143, 251, 103, 189, 239, 246, 163, 135, 242, 255, 166, 249, 120, 207, 216, 209, 10, 96, 37, 30, 46, 9, 177, 172, 103, 130, 199, 142, 214, 20, 136, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 79, 132, 49, 216, 216, 239, 141, 116, 6, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 205, 55, 197, 95, 193, 221, 254, 243, 163, 125, 187, 33, 35, 225, 119, 9, 224, 58, 62, 190, 123, 115, 191, 253, 84, 15, 188, 80, 166, 64, 164, 9, 128, 52, 1, 144, 38, 0, 210, 188, 9, 94, 152, 105, 62, 156, 221, 121, 183, 255, 111, 251, 225, 187, 115, 30, 19, 192, 242, 108, 55, 63, 93, 99, 157, 230, 195, 209, 158, 15, 111, 191, 253, 216, 112, 61, 234, 44, 83, 32, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 230, 70, 216, 242, 60, 190, 25, 124, 226, 78, 48, 167, 9, 96, 97, 142, 110, 250, 158, 190, 19, 204, 89, 166, 64, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 143, 68, 174, 208, 251, 79, 175, 71, 15, 97, 49, 156, 1, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 109, 157, 107, 131, 222, 120, 113, 204, 105, 254, 233, 136, 211, 124, 203, 131, 243, 44, 206, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 218, 58, 175, 2, 221, 222, 52, 31, 70, 15, 129, 75, 8, 224, 10, 182, 155, 221, 232, 33, 112, 33, 83, 32, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 77, 0, 164, 9, 128, 52, 1, 144, 38, 0, 210, 4, 64, 154, 0, 72, 19, 0, 105, 2, 32, 205, 234, 208, 107, 96, 113, 246, 139, 9, 96, 241, 44, 206, 254, 28, 255, 6, 0, 0, 255, 255, 104, 70, 101, 117, 199, 40, 249, 77, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := CreateUser(tt.args.email); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CreateUser() = %v, want %v", got, tt.want)
			}
		})
	}
}
